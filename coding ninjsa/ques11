#include <bits/stdc++.h>
using namespace std;

int projectionArea(vector<vector<int>> &grid) {
    int N = grid.size();
    int xyArea = 0, yzArea = 0, zxArea = 0;
    
    for (int i = 0; i < N; ++i) {
        int maxRow = 0, maxCol = 0;
        for (int j = 0; j < N; ++j) {
            if (grid[i][j] > 0) xyArea++; // Counting non-zero values for XY plane
            maxRow = max(maxRow, grid[i][j]); // Max in the row for YZ plane
            maxCol = max(maxCol, grid[j][i]); // Max in the column for ZX plane
        }
        yzArea += maxRow;
        zxArea += maxCol;
    }

    return xyArea + yzArea + zxArea;
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int N;
        cin >> N;
        vector<vector<int>> grid(N, vector<int>(N));
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                cin >> grid[i][j];
            }
        }
        cout << projectionArea(grid) << endl;
    }
    return 0;
}
